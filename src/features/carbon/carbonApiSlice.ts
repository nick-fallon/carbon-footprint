// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

const carbonKey = import.meta.env.VITE_CARBON_API_KEY;

// Define a service using a base URL and expected endpoints
export const carbonApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: "https://www.carboninterface.com/api/v1",
    headers: { Authorization: `Bearer ${carbonKey}` },
  }),
  reducerPath: "carbonApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Carbon"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getCarbon: build.query<any, any>({
      query: (body) => ({
        url: "/estimates",
        method: "POST",
        body,
      }),
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error) => [{ type: "Carbon" }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useLazyGetCarbonQuery } = carbonApiSlice;
